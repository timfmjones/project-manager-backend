generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  passwordHash String?
  createdAt    DateTime    @default(now())
  projects     Project[]
  ideaDumps    IdeaDump[]
}

model Project {
  id            String      @id @default(uuid())
  userId        String
  name          String
  summaryBanner String      @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ideaDumps     IdeaDump[]
  tasks         Task[]
  milestones    Milestone[]

  @@index([userId])
}

model IdeaDump {
  id          String    @id @default(uuid())
  projectId   String
  userId      String
  contentText String?
  audioUrl    String?
  transcript  String?
  createdAt   DateTime  @default(now())
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  insights    Insight[]

  @@index([projectId])
  @@index([userId])
}

model Insight {
  id             String   @id @default(uuid())
  ideaDumpId     String
  shortSummary   Json
  recommendations Json
  suggestedTasks Json
  pinned         Boolean  @default(false)
  createdAt      DateTime @default(now())
  ideaDump       IdeaDump @relation(fields: [ideaDumpId], references: [id], onDelete: Cascade)

  @@index([ideaDumpId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Task {
  id          String     @id @default(uuid())
  projectId   String
  title       String
  description String?
  status      TaskStatus @default(TODO)
  position    Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Milestone {
  id          String    @id @default(uuid())
  projectId   String
  title       String
  description String?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}